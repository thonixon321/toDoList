{"remainingRequest":"/Users/developertom/vueProjects/toDo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/developertom/vueProjects/toDo/src/components/completed-tasks.vue?vue&type=style&index=0&id=802b84a8&scoped=true&lang=css&","dependencies":[{"path":"/Users/developertom/vueProjects/toDo/src/components/completed-tasks.vue","mtime":1579742634000},{"path":"/Users/developertom/vueProjects/toDo/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/developertom/vueProjects/toDo/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/developertom/vueProjects/toDo/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/developertom/vueProjects/toDo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/developertom/vueProjects/toDo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpidXR0b24gewogIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50Owp9CgoudGFza0NvbnRhaW4gewogIHdpZHRoOiAxMDAlOwogIGRpc3BsYXk6IGZsZXg7CiAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7CiAgbWFyZ2luLWxlZnQ6IC42MWVtOwp9CgoubGFiZWxDb250YWluZXIgewogIHdpZHRoOiAxMmVtOwp9CgoubGFiZWxDb250YWluZXIgbGFiZWwgewogIHdpZHRoOiAxMWVtOwogIG92ZXJmbG93OiBoaWRkZW47CiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7CiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0K"},{"version":3,"sources":["completed-tasks.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6HA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"completed-tasks.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"list\">\r\n    <h3>Complete Tasks: </h3>\r\n    <div class=\"toDoItem\" v-for=\"(item, index) in allTodos\" :key=\"index\">\r\n      <div v-if=\"item.status == 'complete' && item.deleted == false\">\r\n        <div class=\"taskContain\" v-if=\"item.saved == true\">\r\n          <div class='checkBoxContainer'>\r\n            <input @click='callIncompleteToDo(item)' :id=\"'task_'+index\" type='checkbox' checked>\r\n          </div>\r\n          <div class='labelContainer'>\r\n            <label :for=\"'task_'+index\">{{ item.description }}</label>\r\n          </div>\r\n          <div class='buttonContainer'>\r\n            <button @click=\"item.saved = false\">\r\n              <edit-icon />\r\n            </button>\r\n            <button @click=\"openIt(item)\">\r\n              <delete-icon />\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div class=\"taskContain\" v-else-if=\"item.deleted == false\">\r\n          <div class='checkBoxContainer'>\r\n            <input @click='callIncompleteToDo(item)' :id=\"'task_'+index\" type='checkbox' checked>\r\n          </div>\r\n          <div class='labelContainer'>\r\n            <input type='text' v-model=\"item.description\">\r\n          </div>\r\n          <div class='buttonContainer'>\r\n            <button @click=\"item.saved = true\">\r\n              <save-icon />\r\n            </button>\r\n            <button @click=\"openIt(item)\">\r\n              <delete-icon />\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <warning-overlay @closeOverlay='closeIt' v-if=\"openOverlay\" :item='selectedItem' />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\n  import { mapGetters, mapActions } from 'vuex';\r\n  import WarningOverlay from './warning-overlay.vue'\r\n  import EditIcon from '../assets/editIcon.vue';\r\n  import DeleteIcon from '../assets/deleteIcon.vue';\r\n  import SaveIcon from '../assets/saveIcon.vue';\r\n\r\n  export default {\r\n\r\n    name: 'Completed',\r\n\r\n    data: function() {\r\n      return{\r\n        openOverlay: false,\r\n        overlayType: '',\r\n        selectedItem: {}\r\n      }\r\n    },\r\n\r\n\r\n\r\n    computed: {\r\n      ...mapGetters({\r\n            allTodos: 'allTodos'\r\n      })\r\n    },\r\n\r\n\r\n\r\n    props: {\r\n\r\n    },\r\n\r\n\r\n\r\n    methods: {\r\n      ...mapActions({\r\n        callIncompleteToDo: 'callIncompleteToDo'\r\n      }),\r\n\r\n      openIt: function(item) {\r\n\r\n        this.openOverlay = true;\r\n        this.selectedItem = item;\r\n\r\n      },\r\n\r\n      closeIt: function() {\r\n        var self = this;\r\n\r\n        setTimeout(function(){\r\n          self.openOverlay = false;\r\n        }, 200);\r\n      }\r\n\r\n    },\r\n\r\n\r\n\r\n    watch: {\r\n\r\n    },\r\n\r\n\r\n\r\n    mounted: function() {\r\n\r\n    },\r\n\r\n    components: {\r\n      EditIcon,\r\n      DeleteIcon,\r\n      SaveIcon,\r\n      WarningOverlay\r\n    }\r\n  }\r\n\r\n</script>\r\n\r\n\r\n<style scoped>\r\n  button {\r\n    background: transparent;\r\n  }\r\n\r\n  .taskContain {\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: flex-start;\r\n    margin-left: .61em;\r\n  }\r\n\r\n  .labelContainer {\r\n    width: 12em;\r\n  }\r\n\r\n  .labelContainer label {\r\n    width: 11em;\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    text-align: center;\r\n  }\r\n</style>"]}]}