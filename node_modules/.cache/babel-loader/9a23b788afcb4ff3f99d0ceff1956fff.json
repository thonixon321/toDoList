{"remainingRequest":"/Users/developertom/vueProjects/To_Do_Manager/to_do/node_modules/babel-loader/lib/index.js!/Users/developertom/vueProjects/To_Do_Manager/to_do/node_modules/eslint-loader/index.js??ref--13-0!/Users/developertom/vueProjects/To_Do_Manager/to_do/src/store/modules/todos.js","dependencies":[{"path":"/Users/developertom/vueProjects/To_Do_Manager/to_do/src/store/modules/todos.js","mtime":1579187934791},{"path":"/Users/developertom/vueProjects/To_Do_Manager/to_do/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/developertom/vueProjects/To_Do_Manager/to_do/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/developertom/vueProjects/To_Do_Manager/to_do/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleCI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnBhcnNlLWludCI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9kZXZlbG9wZXJ0b20vdnVlUHJvamVjdHMvVG9fRG9fTWFuYWdlci90b19kby9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CnZhciBzdGF0ZSA9IHsKICB0b2RvczogW10KfTsKdmFyIGdldHRlcnMgPSB7CiAgYWxsVG9kb3M6IGZ1bmN0aW9uIGFsbFRvZG9zKHN0YXRlKSB7CiAgICByZXR1cm4gc3RhdGUudG9kb3M7CiAgfQp9Owp2YXIgYWN0aW9ucyA9IHsKICBmZXRjaFRvZG9zOiBmdW5jdGlvbiAoKSB7CiAgICB2YXIgX2ZldGNoVG9kb3MgPSBfYXN5bmNUb0dlbmVyYXRvcigKICAgIC8qI19fUFVSRV9fKi8KICAgIHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoX3JlZikgewogICAgICB2YXIgY29tbWl0LCByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYuY29tbWl0OwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5nZXQoJ2h0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS90b2RvcycpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICBjb21taXQoJ3NldFRvZG9zJywgcmVzcG9uc2UuZGF0YSk7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpOwoKICAgIGZ1bmN0aW9uIGZldGNoVG9kb3MoX3gpIHsKICAgICAgcmV0dXJuIF9mZXRjaFRvZG9zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9CgogICAgcmV0dXJuIGZldGNoVG9kb3M7CiAgfSgpLAogIC8vdXNpbmcgeyBjb21taXQgfSBkZXN0cnVjdHVyZXMgdGhlIG9iamVjdCBwYXNzZWQgaW4gYW5kIGp1c3QgZ3JhYnMgY29tbWl0CiAgYWRkVG9kbzogZnVuY3Rpb24gKCkgewogICAgdmFyIF9hZGRUb2RvID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAvKiNfX1BVUkVfXyovCiAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMihfcmVmMiwgdGl0bGUpIHsKICAgICAgdmFyIGNvbW1pdCwgcmVzcG9uc2U7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjIuY29tbWl0OwogICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MucG9zdCgnaHR0cHM6Ly9qc29ucGxhY2Vob2xkZXIudHlwaWNvZGUuY29tL3RvZG9zJywgewogICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLAogICAgICAgICAgICAgICAgY29tcGxldGVkOiBmYWxzZQogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIHJlc3BvbnNlID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgY29tbWl0KCduZXdUb2RvJywgcmVzcG9uc2UuZGF0YSk7CgogICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlMik7CiAgICB9KSk7CgogICAgZnVuY3Rpb24gYWRkVG9kbyhfeDIsIF94MykgewogICAgICByZXR1cm4gX2FkZFRvZG8uYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH0KCiAgICByZXR1cm4gYWRkVG9kbzsKICB9KCksCiAgZGVsZXRlVG9kbzogZnVuY3Rpb24gKCkgewogICAgdmFyIF9kZWxldGVUb2RvID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAvKiNfX1BVUkVfXyovCiAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMyhfcmVmMywgaWQpIHsKICAgICAgdmFyIGNvbW1pdDsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmMy5jb21taXQ7CiAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5kZWxldGUoImh0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS90b2Rvcy8iLmNvbmNhdChpZCkpOwoKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgIGNvbW1pdCgncmVtb3ZlVG9kbycsIGlkKTsKCiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUzKTsKICAgIH0pKTsKCiAgICBmdW5jdGlvbiBkZWxldGVUb2RvKF94NCwgX3g1KSB7CiAgICAgIHJldHVybiBfZGVsZXRlVG9kby5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfQoKICAgIHJldHVybiBkZWxldGVUb2RvOwogIH0oKSwKICBmaWx0ZXJUb2RvczogZnVuY3Rpb24gKCkgewogICAgdmFyIF9maWx0ZXJUb2RvcyA9IF9hc3luY1RvR2VuZXJhdG9yKAogICAgLyojX19QVVJFX18qLwogICAgcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoX3JlZjQsIGUpIHsKICAgICAgdmFyIGNvbW1pdCwgbGltaXQsIHJlc3BvbnNlOwogICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTQkKF9jb250ZXh0NCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY0LmNvbW1pdDsKICAgICAgICAgICAgICAvL2dldCBzZWxlY3RlZCBudW1iZXIKICAgICAgICAgICAgICBsaW1pdCA9IHBhcnNlSW50KGUudGFyZ2V0Lm9wdGlvbnNbZS50YXJnZXQub3B0aW9ucy5zZWxlY3RlZEluZGV4XS5pbm5lclRleHQpOwogICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNDsKICAgICAgICAgICAgICByZXR1cm4gYXhpb3MuZ2V0KCJodHRwczovL2pzb25wbGFjZWhvbGRlci50eXBpY29kZS5jb20vdG9kb3M/X2xpbWl0PSIuY29uY2F0KGxpbWl0KSk7CgogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICBjb21taXQoJ3NldFRvZG9zJywgcmVzcG9uc2UuZGF0YSk7CgogICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlNCk7CiAgICB9KSk7CgogICAgZnVuY3Rpb24gZmlsdGVyVG9kb3MoX3g2LCBfeDcpIHsKICAgICAgcmV0dXJuIF9maWx0ZXJUb2Rvcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfQoKICAgIHJldHVybiBmaWx0ZXJUb2RvczsKICB9KCksCiAgdXBkYXRlVG9kbzogZnVuY3Rpb24gKCkgewogICAgdmFyIF91cGRhdGVUb2RvID0gX2FzeW5jVG9HZW5lcmF0b3IoCiAgICAvKiNfX1BVUkVfXyovCiAgICByZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNShfcmVmNSwgdXBkVG9kbykgewogICAgICB2YXIgY29tbWl0LCByZXNwb25zZTsKICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBjb21taXQgPSBfcmVmNS5jb21taXQ7CiAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAzOwogICAgICAgICAgICAgIHJldHVybiBheGlvcy5wdXQoImh0dHBzOi8vanNvbnBsYWNlaG9sZGVyLnR5cGljb2RlLmNvbS90b2Rvcy8iLmNvbmNhdCh1cGRUb2RvLmlkKSk7CgogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfY29udGV4dDUuc2VudDsKICAgICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhKTsKICAgICAgICAgICAgICBjb21taXQoJ3VwZFRvZG8nLCByZXNwb25zZS5kYXRhKTsKCiAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ1LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWU1KTsKICAgIH0pKTsKCiAgICBmdW5jdGlvbiB1cGRhdGVUb2RvKF94OCwgX3g5KSB7CiAgICAgIHJldHVybiBfdXBkYXRlVG9kby5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfQoKICAgIHJldHVybiB1cGRhdGVUb2RvOwogIH0oKQp9Owp2YXIgbXV0YXRpb25zID0gewogIHNldFRvZG9zOiBmdW5jdGlvbiBzZXRUb2RvcyhzdGF0ZSwgdG9kb3MpIHsKICAgIHJldHVybiBzdGF0ZS50b2RvcyA9IHRvZG9zOwogIH0sCiAgbmV3VG9kbzogZnVuY3Rpb24gbmV3VG9kbyhzdGF0ZSwgdG9kbykgewogICAgcmV0dXJuIHN0YXRlLnRvZG9zLnVuc2hpZnQodG9kbyk7CiAgfSwKICByZW1vdmVUb2RvOiBmdW5jdGlvbiByZW1vdmVUb2RvKHN0YXRlLCBpZCkgewogICAgcmV0dXJuIHN0YXRlLnRvZG9zID0gc3RhdGUudG9kb3MuZmlsdGVyKGZ1bmN0aW9uICh0b2RvKSB7CiAgICAgIHJldHVybiB0b2RvLmlkICE9PSBpZDsKICAgIH0pOwogIH0sCiAgdXBkVG9kbzogZnVuY3Rpb24gdXBkVG9kbyhzdGF0ZSwgX3VwZFRvZG8pIHsKICAgIC8vZ2l2ZXMgdXMgdGhlIGluZGV4IG9mIHRoZSB0b2RvCiAgICB2YXIgaW5kZXggPSBzdGF0ZS50b2Rvcy5maW5kSW5kZXgoZnVuY3Rpb24gKHRvZG8pIHsKICAgICAgcmV0dXJuIHRvZG8uaWQgPT09IF91cGRUb2RvLmlkOwogICAgfSk7CgogICAgaWYgKGluZGV4ICE9PSAtMSkgewogICAgICAvL3JlcGxhY2UgdGhlIHNlbGVjdGVkIHRvZG8gd2l0aCB0aGUgdXBkYXRlZCByZXNwb25zZQogICAgICBzdGF0ZS50b2Rvcy5zcGxpY2UoaW5kZXgsIDEsIF91cGRUb2RvKTsKICAgIH0KICB9Cn07CmV4cG9ydCBkZWZhdWx0IHsKICBzdGF0ZTogc3RhdGUsCiAgZ2V0dGVyczogZ2V0dGVycywKICBhY3Rpb25zOiBhY3Rpb25zLAogIG11dGF0aW9uczogbXV0YXRpb25zCn07"},{"version":3,"sources":["/Users/developertom/vueProjects/To_Do_Manager/to_do/src/store/modules/todos.js"],"names":["axios","state","todos","getters","allTodos","actions","fetchTodos","commit","get","response","data","addTodo","title","post","completed","deleteTodo","id","delete","filterTodos","e","limit","parseInt","target","options","selectedIndex","innerText","updateTodo","updTodo","put","console","log","mutations","setTodos","newTodo","todo","unshift","removeTodo","filter","index","findIndex","splice"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\n\nconst state = {\n    todos: []\n};\n\nconst getters = {\n    allTodos: (state) => state.todos\n};\n\nconst actions = {\n    async fetchTodos({ commit }) {\n        const response = await axios.get('https://jsonplaceholder.typicode.com/todos');\n\n        commit('setTodos', response.data);\n    },\n    //using { commit } destructures the object passed in and just grabs commit\n    async addTodo({ commit }, title) {\n        const response = await axios.post('https://jsonplaceholder.typicode.com/todos', {title, completed: false});\n\n        commit('newTodo', response.data);\n    },\n    async deleteTodo({ commit }, id) {\n        await axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`);\n\n        commit('removeTodo', id);\n    }, \n    async filterTodos({ commit }, e) {\n        //get selected number\n        const limit = parseInt(e.target.options[e.target.options.selectedIndex].innerText);\n        const response = await axios.get(`https://jsonplaceholder.typicode.com/todos?_limit=${limit}`);\n\n        commit('setTodos', response.data);\n    },\n    async updateTodo({ commit }, updTodo) {\n        const response = await axios.put(`https://jsonplaceholder.typicode.com/todos/${updTodo.id}`);\n\n        console.log(response.data);\n        commit('updTodo', response.data);\n    }\n};\n\nconst mutations = {\n    setTodos: (state, todos) => (state.todos = todos),\n    newTodo: (state, todo) => state.todos.unshift(todo),\n    removeTodo: (state, id) => \n      state.todos = state.todos.filter(todo => todo.id !== id),\n    updTodo: (state, updTodo) => {\n        //gives us the index of the todo\n        const index = state.todos.findIndex(todo => todo.id === updTodo.id);\n\n        if (index !== -1) {\n            //replace the selected todo with the updated response\n            state.todos.splice(index, 1, updTodo);\n        }\n\n    }\n    \n};\n\nexport default {\n    state,\n    getters,\n    actions,\n    mutations\n};"]}]}